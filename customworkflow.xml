<?xml version="1.0"?>
<workflow-definition
	xmlns="urn:liferay.com:liferay-workflow_7.4.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:liferay.com:liferay-workflow_7.4.0 http://www.liferay.com/dtd/liferay-workflow-definition_7_4_0.xsd">
	<name>Single Approver</name>
	<description>A single approver can approve a workflow content.</description>
	<version>1</version>
	<state>
		<name>created</name>
		<metadata>
			<![CDATA[
				{
					"xy": [
						165,
						76
					]
				}
			]]>
		</metadata>
		<initial>true</initial>
		<transitions>
			<transition>
				<name>review</name>
				<target>review</target>
				<default>true</default>
			</transition>
		</transitions>
	</state>
	<state>
		<name>approved</name>
		<metadata>
			<![CDATA[
				{
					"terminal": true,
					"xy": [
						539,
						74
					]
				}
			]]>
		</metadata>
		<actions>
			<action>
				<name>approve</name>
				<script>
					<![CDATA[
						import com.liferay.portal.kernel.workflow.WorkflowConstants;
						import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

						WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);
					]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
		</actions>
	</state>
	<task>
		<name>update</name>
		<metadata>
			<![CDATA[
				{
					"transitions": {
						"resubmit": {
							"bendpoints": [
								[
									303,
									140
								]
							]
						}
					},
					"xy": [
						164,
						533
					]
				}
			]]>
		</metadata>
		<actions>
			<action>
				<name>reject</name>
				<script>
					<![CDATA[
						import com.liferay.portal.kernel.workflow.WorkflowConstants;
						import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

						WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("denied"), workflowContext);
						WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("pending"), workflowContext);
					]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onAssignment</execution-type>
			</action>
			<notification>
				<name>Creator Modification Notification</name>
				<template>
					<![CDATA[Your submission was rejected by ${userName}, please modify and resubmit.]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<user/>
				</recipients>
				<execution-type>onAssignment</execution-type>
			</notification>
		</actions>
		<assignments>
			<user/>
		</assignments>
		<transitions>
			<transition>
				<name>resubmit</name>
				<target>review</target>
				<default>true</default>
			</transition>
		</transitions>
	</task>
	<task>
		<name>review</name>
		<metadata>
			<![CDATA[
				{
					"xy": [
						165,
						292
					]
				}
			]]>
		</metadata>
		<actions>
			<notification>
				<name>Review Notification</name>
				<template>
					<![CDATA[${userName} sent you a ${entryType} for review in the workflow.]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<assignees/>
				</recipients>
				<execution-type>onAssignment</execution-type>
			</notification>
			<notification>
				<name>Review Completion Notification</name>
				<template>
					<![CDATA[Your submission was reviewed<#if taskComments?has_content> and the reviewer applied the following ${taskComments}</#if>.]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<recipients receptionType="to">
					<user/>
				</recipients>
				<execution-type>onExit</execution-type>
			</notification>
		</actions>
		<assignments>
			<scripted-assignment>
				<script>
					<![CDATA[
					import com.liferay.asset.kernel.model.AssetEntry;
import com.liferay.asset.kernel.model.AssetRenderer;
import com.liferay.asset.kernel.model.AssetRendererFactory;

import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.Role;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.UserGroup;
import com.liferay.portal.kernel.service.RoleLocalServiceUtil;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.kernel.workflow.WorkflowHandler;
import com.liferay.portal.kernel.workflow.WorkflowHandlerRegistryUtil;

                	long companyId = GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_COMPANY_ID));
                      String className = (String) workflowContext.get(WorkflowConstants.CONTEXT_ENTRY_CLASS_NAME);
                      WorkflowHandler workflowHandler = WorkflowHandlerRegistryUtil.getWorkflowHandler(className);
                      AssetRendererFactory assetRendererFactory = workflowHandler.getAssetRendererFactory();
                      long classPK = GetterUtil.getLong((String) workflowContext.get(WorkflowConstants.CONTEXT_ENTRY_CLASS_PK));
                      AssetRenderer assetRenderer = workflowHandler.getAssetRenderer(classPK);
                      AssetEntry assetEntry = assetRendererFactory.getAssetEntry(assetRendererFactory.getClassName(), assetRenderer.getClassPK());

                      ArrayList<Role> roles = new ArrayList<Role>();
      ArrayList<UserGroup> userGroups = new ArrayList<UserGroup>();

                      Role role = RoleLocalServiceUtil.getRole(companyId, "Administrator");
                      roles.add(role);
                      role = RoleLocalServiceUtil.getRole(companyId, "Portal Content Reviewer");
                      roles.add(role);
                      role = RoleLocalServiceUtil.getRole(companyId, "Account Administrator");
                      roles.add(role);
                      role = RoleLocalServiceUtil.getRole(companyId, "Account Member");
                      roles.add(role);
                      role = RoleLocalServiceUtil.getRole(companyId, "Asset Library Administrator");
                      roles.add(role);
                      role = RoleLocalServiceUtil.getRole(companyId, "Asset Library Content Reviewer");
                      roles.add(role);
                      role = RoleLocalServiceUtil.getRole(companyId, "Asset Library Owner");
                      roles.add(role);
                      role = RoleLocalServiceUtil.getRole(companyId, "Organization Administrator");
                      roles.add(role);
                      role = RoleLocalServiceUtil.getRole(companyId, "Organization Content Reviewer");
                      roles.add(role);
                      role = RoleLocalServiceUtil.getRole(companyId, "Organization Owner");
                      roles.add(role);
                      role = RoleLocalServiceUtil.getRole(companyId, "Site Administrator");
                      roles.add(role);
                      role = RoleLocalServiceUtil.getRole(companyId, "Site Content Reviewer");
                      roles.add(role);
                      role = RoleLocalServiceUtil.getRole(companyId, "Site Owner");
                      roles.add(role);

                      User creator = UserLocalServiceUtil.getUser(assetEntry.getUserId());
      userGroups.add(creator.getUserGroups().stream().findFirst().orElse(null));
    			]]>
				</script>
				<script-language>groovy</script-language>
			</scripted-assignment>
		</assignments>
		<transitions>
			<transition>
				<name>approve</name>
				<target>approved</target>
				<default>true</default>
			</transition>
			<transition>
				<name>reject</name>
				<target>update</target>
				<default>false</default>
			</transition>
		</transitions>
	</task>
</workflow-definition>